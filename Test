import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from math import sin
from sklearn.linear_model import SGDRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_absolute_percentage_error
from matplotlib.widgets import Slider

# 1. Генерация данных с шумом и сохранение в файл
def generate_data(n_samples=200, noise_std=0.5):
    np.random.seed(42)
    x = np.linspace(0, 10, n_samples)
    y = 2*x + 3*np.sin(1.5*x) + np.random.normal(0, noise_std, n_samples)
    return x, y

x, y = generate_data()
data = pd.DataFrame({'x': x, 'y': y})
data.to_csv('regression_data.csv', index=False)

# 2. Загрузка и подготовка данных
data = pd.read_csv('regression_data.csv')
X = data[['x']].values
y = data['y'].values

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# 3. Обучение модели с отслеживанием MAPE по эпохам
def train_sgd_by_epochs(X_train, y_train, X_test, y_test, n_epochs=100, **sgd_params):
    model = SGDRegressor(**sgd_params)
    mape_history = []
    
    for _ in range(n_epochs):
        model.partial_fit(X_train, y_train)
        y_pred = model.predict(X_test)
        mape = mean_absolute_percentage_error(y_test, y_pred)
        mape_history.append(mape)
    
    return model, mape_history

sgd_params = {
    'alpha': 0.01,
    'eta0': 0.1,
    'learning_rate': 'constant',
    'random_state': 42
}

model, mape_history = train_sgd_by_epochs(X_train, y_train, X_test, y_test, 
                                         n_epochs=200, **sgd_params)

# 4. Визуализация MAPE по эпохам с ползунком
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
plt.subplots_adjust(bottom=0.25)

# График MAPE
line, = ax1.plot(mape_history)
ax1.set_title('MAPE по эпохам')
ax1.set_xlabel('Эпоха')
ax1.set_ylabel('MAPE')
ax1.grid()

# График регрессии
scatter = ax2.scatter(X_test, y_test, color='b', label='Данные')
reg_line, = ax2.plot(X_test, model.predict(X_test), 'r-', linewidth=2, label='Прогноз')
ax2.set_title('Регрессия')
ax2.legend()

# Ползунок
ax_slider = plt.axes([0.2, 0.1, 0.6, 0.03])
slider = Slider(ax_slider, 'Эпоха', 1, len(mape_history), valinit=len(mape_history), valstep=1)

def update(val):
    epoch = int(slider.val)
    temp_model = SGDRegressor(**sgd_params)
    for _ in range(epoch):
        temp_model.partial_fit(X_train, y_train)
    
    line.set_data(np.arange(epoch), mape_history[:epoch])
    ax1.set_xlim(0, epoch)
    
    reg_line.set_ydata(temp_model.predict(X_test))
    ax2.set_ylim(min(y_test)-1, max(y_test)+1)
    
    fig.canvas.draw_idle()

slider.on_changed(update)
plt.show()

# 5. Подбор параметров с помощью GridSearchCV
param_grid = {
    'alpha': [0.0001, 0.001, 0.01, 0.1],
    'eta0': [0.01, 0.1, 0.5],
    'learning_rate': ['constant', 'optimal', 'invscaling'],
    'penalty': ['l1', 'l2', 'elasticnet']
}

sgd = SGDRegressor(max_iter=1000, random_state=42)
grid_search = GridSearchCV(sgd, param_grid, cv=5, scoring='neg_mean_absolute_percentage_error')
grid_search.fit(X_scaled, y)

print("Лучшие параметры:", grid_search.best_params_)
print("Лучший MAPE:", -grid_search.best_score_)

# 6. Альтернативная интерактивная визуализация (для Jupyter Notebook)
from ipywidgets import interactive

def plot_regression(epoch):
    temp_model = SGDRegressor(**sgd_params)
    for _ in range(epoch):
        temp_model.partial_fit(X_train, y_train)
    
    plt.figure(figsize=(12, 5))
    
    plt.subplot(1, 2, 1)
    plt.plot(mape_history[:epoch])
    plt.title(f'MAPE по эпохам (эпоха {epoch})')
    plt.xlabel('Эпоха')
    plt.ylabel('MAPE')
    plt.grid()
    
    plt.subplot(1, 2, 2)
    plt.scatter(X_test, y_test, color='b')
    plt.plot(X_test, temp_model.predict(X_test), 'r-', linewidth=2)
    plt.title('Регрессия')
    
    plt.tight_layout()
    plt.show()

interactive(plot_regression, epoch=(1, len(mape_history), 1))
